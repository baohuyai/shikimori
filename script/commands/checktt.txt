const fonts = "/cache/Play-Bold.ttf"
const downfonts = "https://drive.google.com/u/0/uc?id=1uni8AiYk7prdrC7hgAmezaGTMH5R8gW8&export=download"
const fontsName = 35
const fontsInfo = 25
const fontsOthers = 27
const colorName = "#EEEEEE"
module.exports.config = {
    name: "checktt", // T√™n l·ªánh, ƒë∆∞·ª£c s·ª≠ d·ª•ng trong vi·ªác g·ªçi l·ªánh
    version: "1.0.1", // phi√™n b·∫£n c·ªßa module n√†y
    hasPermssion: 0, // Quy·ªÅn h·∫°n s·ª≠ d·ª•ng, v·ªõi 0 l√† to√†n b·ªô th√†nh vi√™n, 1 l√† qu·∫£n tr·ªã vi√™n tr·ªü l√™n, 2 l√† admin/owner
    credits: "Milo", // C√¥ng nh·∫≠n module s·ªü h·ªØu l√† ai
    description: "Check t∆∞∆°ng t√°c ng√†y/tu·∫ßn/to√†n b·ªô", // Th√¥ng tin chi ti·∫øt v·ªÅ l·ªánh
    commandCategory: "Th·ªëng k√™", // Thu·ªôc v√†o nh√≥m n√†o: system, other, game-sp, game-mp, random-img, edit-img, media, economy, ...
    usages: "< all/week/day >", // C√°ch s·ª≠ d·ª•ng l·ªánh
    cooldowns: 5, // Th·ªùi gian m·ªôt ng∆∞·ªùi c√≥ th·ªÉ l·∫∑p l·∫°i l·ªánh
    dependencies: {
        "fs": "",
        "moment-timezone": "",
         canvas: "",
        "systeminformation": "",
        "fs-extra": ""
        
    }
};
function byte2mb(bytes) {
	const units = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
	let l = 0, n = parseInt(bytes, 10) || 0;
	while (n >= 1024 && ++l) n = n / 1024;
	return `${n.toFixed(n < 10 && l > 0 ? 1 : 0)} ${units[l]}`;
}
 module.exports.circle = async (image) => {
  const jimp = global.nodemodule["jimp"];
  image = await jimp.read(image);
  image.circle();
  return await image.getBufferAsync("image/png");
}
const path = __dirname + '/cache/checktt/';
const { min } = require('moment-timezone');
const moment = require('moment-timezone');
const { format } = require('path');
 
module.exports.onLoad = () => {
    const fs = require('fs');
    if (!fs.existsSync(path) || !fs.statSync(path).isDirectory()) {
        fs.mkdirSync(path, { recursive: true });
    }
  setInterval(() => {
    const today = moment.tz("Asia/Ho_Chi_Minh").day();
    const checkttData = fs.readdirSync(path);
    checkttData.forEach(file => {
      let fileData = JSON.parse(fs.readFileSync(path + file));
      if (fileData.time != today) {
        setTimeout(() => {
          fileData = JSON.parse(fs.readFileSync(path + file));
          if (fileData.time != today) {
            fileData.time = today;
            fs.writeFileSync(path + file, JSON.stringify(fileData, null, 4));
          }
        }, 60 * 1000);
      }
    })
  }, 60 * 1000);
}
 
module.exports.handleEvent = async function ({ api, args, Users, event, Threads, }) {
  const threadInfo = await api.getThreadInfo(event.threadID)
    if (global.client.sending_top == true) return;
    const fs = global.nodemodule['fs'];
    const { threadID, senderID } = event;
    const today = moment.tz("Asia/Ho_Chi_Minh").day();
 
    if (!fs.existsSync(path + threadID + '.json')) {
        const newObj = {
            total: [],
            week: [],
            day: [],
            time: today
        };
        fs.writeFileSync(path + threadID + '.json', JSON.stringify(newObj, null, 4));
        const threadInfo = await Threads.getInfo(threadID) || {};
        if (threadInfo.hasOwnProperty('isGroup') && threadInfo.isGroup) {
            const UserIDs = threadInfo.participantIDs;
            for (user of UserIDs) {
                if (!newObj.total.find(item => item.id == user)) {
                    newObj.total.push({
                        id: user,
                        count: 0
                    });
                }
                if (!newObj.week.find(item => item.id == user)) {
                    newObj.week.push({
                        id: user,
                        count: 0
                    });
                }
                if (!newObj.day.find(item => item.id == user)) {
                    newObj.day.push({
                        id: user,
                        count: 0
                    });
                }
            }
        }
        fs.writeFileSync(path + threadID + '.json', JSON.stringify(newObj, null, 4));
    }
    const threadData = JSON.parse(fs.readFileSync(path + threadID + '.json'));
    if (threadData.time != today) {
      global.client.sending_top = true;
      setTimeout(() => global.client.sending_top = false, 5 * 60 * 1000);
    }
    const userData_week_index = threadData.week.findIndex(e => e.id == senderID);
    const userData_day_index = threadData.day.findIndex(e => e.id == senderID);
    const userData_total_index = threadData.total.findIndex(e => e.id == senderID);
    if (userData_total_index == -1) {
        threadData.total.push({
            id: senderID,
            count: 1,
        });
    } else threadData.total[userData_total_index].count++;
    if (userData_week_index == -1) {
        threadData.week.push({
            id: senderID,
            count: 1
        });
    } else threadData.week[userData_week_index].count++;
    if (userData_day_index == -1) {
        threadData.day.push({
            id: senderID,
            count: 1
        });
    } else threadData.day[userData_day_index].count++;
    // if (threadData.time != today) {
    //     threadData.day.forEach(e => {
    //         e.count = 0;
    //     });
    //     if (today == 1) {
    //         threadData.week.forEach(e => {
    //             e.count = 0;
    //         });
    //     }
    //     threadData.time = today;
    // }
 
    fs.writeFileSync(path + threadID + '.json', JSON.stringify(threadData, null, 4));
}
 
module.exports.run = async function ({ api, event, args, Users, Threads }) {
  let threadInfo = await api.getThreadInfo(event.threadID);
    await new Promise(resolve => setTimeout(resolve, 500));
    const fs = global.nodemodule['fs'];
    const { threadID, messageID, senderID, mentions } = event;
    if (!fs.existsSync(path + threadID + '.json')) {
        return api.sendMessage("Ch∆∞a c√≥ th·ªëng k√™ d·ªØ li·ªáu", threadID);
    }
    const threadData = JSON.parse(fs.readFileSync(path + threadID + '.json'));
    const query = args[0] ? args[0].toLowerCase() : '';
    
    if(query == 'locmem') {
        let threadInfo = await api.getThreadInfo(threadID);
        if(!threadInfo.adminIDs.some(e => e.id == senderID)) return api.sendMessage("[‚öúÔ∏è]‚ûú B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y", threadID);
        if(!threadInfo.isGroup) return api.sendMessage("[‚öúÔ∏è]‚ûú Ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong nh√≥m", threadID);
        if(!threadInfo.adminIDs.some(e => e.id == api.getCurrentUserID())) return api.sendMessage("[‚öúÔ∏è]‚ûú Bot c·∫ßn qtv ƒë·ªÉ th·ª±c hi·ªán l·ªánh", threadID);
        if(!args[1] || isNaN(args[1])) return api.sendMessage("Error", threadID);
        let minCount = args[1],
            allUser = threadInfo.participantIDs;
        for(let user of allUser) {
            if(user == api.getCurrentUserID()) continue;
            if(!threadData.total.some(e => e.id == user) || threadData.total.find(e => e.id == user).count < minCount) {
                setTimeout(async () => {
                    await api.removeUserFromGroup(user, threadID);
                    for(let e in threadData) {
                        if(e == 'time') continue;
                        if(threadData[e].some(e => e.id == user)) {
                            threadData[e].splice(threadData[e].findIndex(e => e.id == user), 1);
                        }
                    }
                }, 1000);
            }
        }
        return api.sendMessage(`[‚öúÔ∏è]‚ûú ƒê√£ x√≥a ${allUser.length - threadData.total.filter(e => e.count >= minCount).length} th√†nh vi√™n kh√¥ng ƒë·ªß ${minCount} l·∫ßn`, threadID);
    }

    var header = '',
        body = '',
        footer = '',
        msg = '',
        count = 1,
        storage = [],
        data = 0;
    if (query == 'all' || query == '-a') {
        header = '===ùóßùó®Ãõùó¢Ãõùó°ùóö ùóßùóîÃÅùóñ ùóîùóüùóü===\n';
        data = threadData.total;
    } else if (query == 'week' || query == '-w') {
        header = '===ùóßùó®Ãõùó¢Ãõùó°ùóö ùóßùóîÃÅùóñ ùóßùó®ùóîÃÇÃÄùó°===\n';
        data = threadData.week;
    } else if (query == 'day' || query == '-d') {
        header = '===ùóßùó®Ãõùó¢Ãõùó°ùóö ùóßùóîÃÅùóñ ùó°ùóöùóîÃÄùó¨===\n';
        data = threadData.day;
    } else {
        data = threadData.total;
    }
    for (const item of data) {
        const userName = await Users.getNameUser(item.id) || 'T√™n kh√¥ng t·ªìn t·∫°i';
        const itemToPush = item;
        itemToPush.name = userName;
        storage.push(itemToPush);
    };
    let check = ['all', '-a', 'week', '-w', 'day', '-d'].some(e => e == query);
    if (!check && Object.keys(mentions).length > 0) {
        storage = storage.filter(e => mentions.hasOwnProperty(e.id));
    }
    //sort by count from high to low if equal sort by name
    storage.sort((a, b) => {
        if (a.count > b.count) {
            return -1;
        }
        else if (a.count < b.count) {
            return 1;
        } else {
            return a.name.localeCompare(b.name);
        }
    });
    if ((!check && Object.keys(mentions).length == 0) || (!check && Object.keys(mentions).length == 1) || (!check && event.type == 'message_reply')) {
        const UID = event.messageReply ? event.messageReply.senderID : Object.keys(mentions)[0] ? Object.keys(mentions)[0] : senderID;
        const userRank = storage.findIndex(e => e.id == UID);
        const userTotal = threadData.total.find(e => e.id == UID) ? threadData.total.find(e => e.id == UID).count : 0;
        const userTotalWeek = threadData.week.find(e => e.id == UID) ? threadData.week.find(e => e.id == UID).count : 0;
        const userTotalDay = threadData.day.find(e => e.id == UID) ? threadData.day.find(e => e.id == UID).count : 0;
        const nameUID = storage[userRank].name || 'T√™n kh√¥ng t·ªìn t·∫°i';
        const target = UID == senderID ? 'B·∫°n' : nameUID;
      const moment = require("moment-timezone");
  const timeNow = moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY || HH:mm:ss");
      var permission;
        if (global.config.ADMINBOT.includes(UID)) permission = `Admin Bot`;
else if
(global.config.NDH.includes(UID)) 
permission = `Ng∆∞·ªùi H·ªó Tr·ª£`; else if (threadInfo.adminIDs.some(i => i.id == UID)) permission = `Qu·∫£n Tr·ªã Vi√™n`; else permission = `Th√†nh Vi√™n`;
      var thu = moment.tz('Asia/Ho_Chi_Minh').format('dddd');
  if (thu == 'Sunday') thu = 'ùêÇùê°ùêÆÃâ ùêçùê°ùêöÃ£ÃÇùê≠'
  if (thu == 'Monday') thu = 'ùêìùê°ùêÆÃõÃÅ ùêáùêöùê¢'
  if (thu == 'Tuesday') thu = 'ùêìùê°ùêÆÃõÃÅ ùêÅùêö'
  if (thu == 'Wednesday') thu = 'ùêìùê°ùêÆÃõÃÅ ùêìùêÆÃõ'
  if (thu == "Thursday") thu = 'ùêìùê°ùêÆÃõÃÅ ùêçùêöÃÜùê¶'
  if (thu == 'Friday') thu = 'ùêìùê°ùêÆÃõÃÅ ùêíùêöÃÅùêÆ'
  if (thu == 'Saturday') thu = 'ùêìùê°ùêÆÃõÃÅ ùêÅùêöÃâùê≤'
      let threadName = threadInfo.threadName;
        if (userRank == -1) {
            return api.sendMessage(`‚ûú ${target} ch∆∞a c√≥ th·ªëng k√™ d·ªØ li·ªáu`, threadID);
        }
        body +=
          `==== [ ùóñùóõùóòùóñùóû ùóßùó®Ãõùó¢Ãõùó°ùóö ùóßùóîÃÅùóñ ] =====\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n[üë§] ‚ûú ùó°ùóÆùó∫ùó≤: ${nameUID}\n[üìå] ‚ûú ùóôùóÆùó∞ùó≤ùóØùóºùóºùó∏: https://www.facebook.com/profile.php?id=${event.senderID}\n[üå∏] ‚ûú ùóúùóó: ${event.senderID}\n[üíì] ‚ûú ùóñùóµùòÇÃõÃÅùó∞ ùòÉùòÇÃ£: ${permission}\n[üî∞] ‚ûú ùóßùó≤ÃÇùóª ùóªùóµùóºÃÅùó∫: ${threadName}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n[üíå] ‚ûú ùóßùó∂ùóª ùóªùóµùóÆÃÜÃÅùóª ùòÅùóøùóºùóªùó¥ ùóªùó¥ùóÆÃÄùòÜ: ${userTotalDay}\n[üíì] ‚ûú ùóõùóÆÃ£ùóªùó¥ ùòÅùóøùóºùóªùó¥ ùóªùó¥ùóÆÃÄùòÜ: ${count++}\n[üí¨] ‚ûú ùóßùó∂ùóª ùóªùóµùóÆÃÜÃÅùóª ùòÅùóøùóºùóªùó¥ ùòÅùòÇùóÆÃÇÃÄùóª: ${userTotalWeek}\n[üß∏] ‚ûú ùóõùóÆÃ£ùóªùó¥ ùòÅùóøùóºùóªùó¥ ùòÅùòÇùóÆÃÇÃÄùóª: ${count++}\n[üìö] ‚ûú ùóßùóºÃÇÃâùóªùó¥ ùòÅùó∂ùóª ùóªùóµùóÆÃÜÃÅùóª: ${userTotal}\n[ü•á] ‚ûú ùóõùóÆÃ£ùóªùó¥ ùòÅùóºÃÇÃâùóªùó¥:  ${userRank + 1}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n[üíÆ] ‚ûú ùó°ùó≤ÃÇÃÅùòÇ ùó∫ùòÇùóºÃÇÃÅùóª ùòÖùó≤ùó∫ ùòÅùóµùóºÃÇùóªùó¥ ùòÅùó∂ùóª ùóªùóµùóºÃÅùó∫ ùóØùóÆÃ£ùóª ùòÅùóµùóÆÃâ ùó∞ùóÆÃâùó∫ ùòÖùòÇÃÅùó∞ "‚ù§" ùòÉùóÆÃÄùóº ùòÅùó∂ùóª ùóªùóµùóÆÃÜÃÅùóª ùóªùóÆÃÄùòÜ ùó∞ùòÇÃâùóÆ ùóØùóºùòÅ`.replace(/^ +/gm, '');
    } else {
        body = storage.map(item => {
            return `${count++}. ${item.name} (${item.count})`;
        }).join('\n');
        footer = `‚ûú T·ªïng Tin Nh·∫Øn: ${storage.reduce((a, b) => a + b.count, 0)}`;
    }
  async function streamURL(url, mime='jpg') {
    const dest = `${__dirname}/cache/${Date.now()}.${mime}`,
    downloader = require('image-downloader'),
    fse = require('fs-extra');
    await downloader.image({
        url, dest
    });
    setTimeout(j=>fse.unlinkSync(j), 60*1000, dest);
    return fse.createReadStream(dest);
};
    msg = `${header}\n${body}\n${footer}`;
    api.sendMessage({body: msg, attachment: [await streamURL(threadInfo.imageSrc), await streamURL(`https://graph.facebook.com/${event.senderID}/picture?height=720&width=720&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`)]}, threadID, (err, info) => {
    global.client.handleReaction.push({
      name: this.config.name, 
      messageID: info.messageID,
      author: event.senderID,
    })
    },event.messageID);
                     }
module.exports.handleReaction = async ({ event, api, handleReaction, Currencies, Users}) => {
const axios = global.nodemodule["axios"];
const fs = global.nodemodule["fs-extra"];
  const { threadID, messageID, userID } = event;
  const moment = require("moment-timezone");
    var gio = moment.tz("Asia/Ho_Chi_Minh").format("D/MM/YYYY || HH:mm:ss");
    var thu = moment.tz('Asia/Ho_Chi_Minh').format('dddd');
  if (thu == 'Sunday') thu = 'Ch·ªß Nh·∫≠t'
  if (thu == 'Monday') thu = 'Th·ª© Hai'
  if (thu == 'Tuesday') thu = 'Th·ª© Ba'
  if (thu == 'Wednesday') thu = 'Th·ª© T∆∞'
  if (thu == "Thursday") thu = 'Th·ª© NƒÉm'
  if (thu == 'Friday') thu = 'Th·ª© S√°u'
  if (thu == 'Saturday') thu = 'Th·ª© B·∫£y'
if (event.userID != handleReaction.author) return;
if (event.reaction != "‚ù§") return; 
 api.unsendMessage(handleReaction.messageID);
        var msg = `=== [ ùó†ùóòùó°ùó® ùóßùóõùó¢ÃÇùó°ùóö ùóßùóúùó° ] ===\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nùü≠. ùó´ùó≤ùó∫ ùòÅùóµùóºÃÇùóªùó¥ ùòÅùó∂ùóª ùó∞ùòÇÃâùóÆ ùóªùóµùóºÃÅùó∫\nùüÆ. ùóßùóµùóºÃÇùóªùó¥ ùòÅùó∂ùóª ùóπùó∂ùó≤ÃÇùóª ùóµùó≤ÃÇÃ£ ùóÆùó±ùó∫ùó∂ùóª ùóØùóºùòÅ\nùüØ. ùóüùóºÃ£ùó∞ ùóªùó¥ùòÇÃõùóºÃõÃÄùó∂ ùó±ùòÇÃÄùóªùó¥ ùóôùóÆùó∞ùó≤ùóØùóºùóºùó∏\nùü∞. ùóßùóµùóºÃÇùóªùó¥ ùòÅùó∂ùóª ùòÉùó≤ÃÇÃÄ ùóØùóºùòÅ\nùü±. ùóßùóµùóºÃÇùóªùó¥ ùòÅùó∂ùóª ùó∞ùóÆÃÅ ùóªùóµùóÆÃÇùóª ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª\nùü≤. ùóüùóÆÃÇÃÅùòÜ ùó®ùóúùóó ùóôùóÆùó∞ùó≤ùóØùóºùóºùó∏ ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª\nùü≥. ùó´ùó≤ùó∫ ùòÅùóµùóºÃÇùóªùó¥ ùòÅùó∂ùóª ùòÉùó≤ÃÇÃÄ ùó∞ùóºùòÉùó∂ùó±\nùü¥. ùóöùóµùó≤ÃÅùóΩ ƒëùóºÃÇùó∂ ùòÉùóºÃõÃÅùó∂ ùóØùóÆÃ£ùóª ùóøùóÆùóªùó±ùóºùó∫ ùòÅùóøùóºùóªùó¥ ùóªùóµùóºÃÅùó∫\nùüµ. ùóßùóµùóºÃÇùóªùó¥ ùòÅùó∂ùóª ùó∫ùóÆÃÅùòÜ ùó∞ùóµùòÇÃâ ùóØùóºùòÅ\nùü≠ùü¨. ùóñùóÆùóΩ ùó™ùóÆùóπùóπ ùóôùóÆùó∞ùó≤ùóØùóºùóºùó∏ ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª\n\n[‚öúÔ∏è] ‚ûú ùó•ùó≤ùóΩùóπùòÜ ùòÅùó∂ùóª ùóªùóµùóÆÃÜÃÅùóª ùóªùóÆÃÄùòÜ ùòÅùóµùó≤ùóº ùòÄùóºÃÇÃÅ ƒëùó≤ÃÇÃâ ùòÖùó≤ùó∫ ùòÅùóµùóºÃÇùóªùó¥ ùòÅùó∂ùóª ùóØùóÆÃ£ùóª ùó∫ùòÇùóºÃÇÃÅùóª ùòÖùó≤ùó∫\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n===„Äå${thu} || ${gio}„Äç===`
        return api.sendMessage({body: msg, attachment: (await global.nodemodule["axios"]({
url: (await global.nodemodule["axios"]('https://docs-api.jrtxtracy.repl.co/images/anime?apikey=JRTvip_2200708248')).data.data,
method: "GET",
responseType: "stream"
})).data
},event.threadID,(error, info) => {
        
            global.client.handleReply.push({
                type: "choosee",
                name: this.config.name,
                author: event.senderID,
                messageID: info.messageID
            })
        })
    }
module.exports.handleReply = async function ({
    args,
    event,
    Users,
    Threads,
    api,
    handleReply,
    Currencies,
    __GLOBAL
}) {
  const { threadID, messageID, userID } = event;
  const axios = require("axios");
  const fs = require("fs-extra");
        api.sendMessage(`[‚öúÔ∏è] ‚ûú Vui l√≤ng ch·ªù 1 x√≠u !!!`, event.threadID, (err, info) =>
	setTimeout(() => {api.unsendMessage(info.messageID) } , 100000));
  const request = require("request");
       const nameUser = (await Users.getData(event.senderID)).name || (await Users.getInfo(envent.senderID)).name;
  let data = (await Currencies.getData(event.senderID)).ghepTime;
 
    
    switch (handleReply.type) {
    case "choosee": {
        switch (event.body) {
        case "1": {
          const axios = global.nodemodule["axios"];
const fs = global.nodemodule["fs-extra"];
const { threadID, messageID, userID } = event;
  async function streamURL(url, mime='jpg') {
    const dest = `${__dirname}/cache/${Date.now()}.${mime}`,
    downloader = require('image-downloader'),
    fse = require('fs-extra');
    await downloader.image({
        url, dest
    });
    setTimeout(j=>fse.unlinkSync(j), 60*1000, dest);
    return fse.createReadStream(dest);
};
  let threadInfo = await api.getThreadInfo(event.threadID);
  let threadName = threadInfo.threadName;
  let id = threadInfo.threadID;
  let sex = threadInfo.approvalMode;
  var pd = sex == false ? 'T·∫Øt' : sex == true ? 'B·∫≠t' : '\n';
  let qtv = threadInfo.adminIDs.length;
  let color = threadInfo.color;
  let icon = threadInfo.emoji;
  let threadMem = threadInfo.participantIDs.length;
  api.unsendMessage(handleReply.messageID);
        var msg = `=====„Äå ùóßùóõùó¢ÃÇùó°ùóö ùóßùóúùó° ùó°ùóõùó¢ÃÅùó† „Äç=====\n\n[üèòÔ∏è] ‚ûú ùóßùó≤ÃÇùóª ùóªùóµùóºÃÅùó∫: ${threadName}\n[‚öôÔ∏è] ‚ûú ùóúùóó ùóªùóµùóºÃÅùó∫: ${id}\n[üë•] ‚ûú ùó¶ùóºÃÇÃÅ ùòÅùóµùóÆÃÄùóªùóµ ùòÉùó∂ùó≤ÃÇùóª ùóªùóµùóºÃÅùó∫: ${threadMem}\n[üíû] ‚ûú ùó§ùòÇùóÆÃâùóª ùòÅùóøùó∂Ã£ ùòÉùó∂ùó≤ÃÇùóª: ${qtv}\n[üå∑] ‚ûú ùó£ùóµùó≤ÃÇ ùó±ùòÇùòÜùó≤ÃÇÃ£ùòÅ: ${pd}\n[üòª] ‚ûú ùóïùó∂ùó≤ÃÇÃâùòÇ ùòÅùòÇÃõùóºÃõÃ£ùóªùó¥ ùó∞ùóÆÃâùó∫ ùòÖùòÇÃÅùó∞: ${icon ? icon : 'Kh√¥ng s·ª≠ d·ª•ng'}\n[üíù] ‚ûú ùó†ùóÆÃÉ ùó¥ùó∂ùóÆùóº ùó±ùó∂ùó≤ÃÇÃ£ùóª: ${color}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n[üçë] ‚ûú ùóßùóºÃÇÃâùóªùó¥ ùòÄùóºÃÇÃÅ ùòÅùó∂ùóª ùóªùóµùóÆÃÜÃÅùóª ùó∞ùòÇÃâùóÆ ùóªùóµùóºÃÅùó∫: ${threadInfo.messageCount}\n[üéÄ] ‚ûú ùó£ùóµùó∂ÃÅùóÆ ùòÅùóøùó≤ÃÇùóª ùóπùóÆÃÄ ùòÅùóµùóºÃÇùóªùó¥ ùòÅùó∂ùóª ùó∞ùòÇÃâùóÆ ùóªùóµùóºÃÅùó∫ ùóØùóÆÃ£ùóª ùó±ùòÇÃÄùóªùó¥ ${global.config.PREFIX}ùóØùóºùòÖ ùó∂ùóªùó≥ùóº ƒëùó≤ÃÇÃâ ùòÖùó≤ùó∫ ùó∞ùóµùó∂ ùòÅùó∂ùó≤ÃÇÃÅùòÅ `
        return api.sendMessage({body: msg, attachment: [await streamURL(threadInfo.imageSrc), await streamURL(`https://graph.facebook.com/${event.senderID}/picture?height=720&width=720&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`)]},event.threadID, event.messageID)
        }
        case "2": {
          api.unsendMessage(handleReply.messageID);
          const request = require('request');
          const fs = global.nodemodule["fs-extra"];
    var callback = () => api.sendMessage(

  {body:`[‚öúÔ∏è]=== „Äé INFORMATION ADMIN „Äè ===[‚öúÔ∏è]
‚óÜ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óÜ

[üëÄ]‚ûú T√™n: Nguy·ªÖn H·∫£i ƒêƒÉng
[üíÆ]‚ûú Bi·ªát danh: JRT 
[‚ùé]‚ûú Ng√†y th√°ng nƒÉm sinh: 26/02/2003 
[üë§]‚ûú Gi·ªõi t√≠nh: Nam
[üí´]‚ûú Chi·ªÅu cao c√¢n n·∫∑ng: 1m75 x 68 kg
[‚ù§Ô∏è]‚ûú T√™n duy√™n ph·∫≠n: Nguy·ªÖn H·ªìng Ph·∫•n
[üß∏]‚ûú Bi·ªát danh: Tracy
[üí•]‚ûú Ng√†y sinh: 07/12/2001
[üíò]‚ûú M·ªëi quan h·ªá: ƒê√£ ƒë√≠nh h√¥n
[üåé]‚ûú Qu√™ qu√°n: Ph√∫ Th·ªç - H√† N·ªôi
[üå∏]‚ûú T√≠nh c√°ch: H√≤a ƒë·ªìng, nƒÉng n·ªï, d·ª©t kho√°t, th√¢n thi·ªán v√† h√†i h∆∞·ªõc
[üåÄ]‚ûú S·ªü th√≠ch: Th√≠ch c√°i ƒë·∫πp, ƒëi ph∆∞·ª£t, giao l∆∞u ca h√°t, th∆∞·ªüng th·ª©c c√°c m√≥n ·∫©m th·ª±c kh√°c nhau

[‚öúÔ∏è]=== „Äé CONTACT „Äè ===[‚öúÔ∏è]
‚óÜ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óÜ

[üëâ]‚ûú Information: https://bio.link/nhdjrt262
[‚òé]‚ûú SƒêT & Zalo: 0396049649
[üåê]‚ûú Facebook: https://www.facebook.com/NHD.JRT.262
[‚õ±]‚ûú TikTok: https://www.tiktok.com/@hd.jrt03
[‚õ≤]‚ûú Instagram: https://www.instagram.com/hd.jrt.2k3
[üîé]‚ûú Twitter: https://twitter.com/JRTOfficial_03
[üìã]‚ûú Telegram: https://t.me/nhdjrt262
[üé¨]‚ûú Youtube: https://www.youtube.com/channel/UCNK_WugSVHOSAIPKr2epEOQ
[‚úâÔ∏è]‚ûú Email: dangz123456789z@gmail.com || lehonguyen2k3@gmail.com

[‚öúÔ∏è]=== „Äé CONTACT „Äè ===[‚öúÔ∏è]
‚óÜ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óÜ

[üíµ]‚ûú MOMO: 0354838459 / https://i.imgur.com/Ed0rDrO.png / Nguy·ªÖn H·ªìng Ph·∫•n
[üíµ]‚ûú MOMO: 0396049649 / https://i.imgur.com/Hxbs1q0.png / Nguy·ªÖn H·∫£i ƒêƒÉng
[üíµ]‚ûú MBBANK: 0396049649 / https://imgur.com/NXX9Lnh / Nguy·ªÖn H·∫£i ƒêƒÉng
[üíµ]‚ûú MBBANK: 0396049649 / https://i.imgur.com/2yj1jqY.png / Nguy·ªÖn H·ªìng Ph·∫•n
[üíµ]‚ûú TIMO BANK: 9021288475332 / https://i.imgur.com/vTx2DQp.jpg / Nguy·ªÖn H·∫£i ƒêƒÉng
[üíµ]‚ûú ZALO PAY: 0396049649 / https://imgur.com/LBeXzsy / Nguy·ªÖn H·∫£i ƒêƒÉng
[üíµ]‚ûú AGRIBANK: 4810205345666 / https://i.imgur.com/DObUFKB.png / Nguy·ªÖn H·ªìng Ph·∫•n

[‚öúÔ∏è]=== „Äé PROBLEM „Äè ===[‚öúÔ∏è]
‚óÜ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óÜ

[‚ùó]‚ûú M·ªçi th·∫Øc m·∫Øc hay bot kh√¥ng ho·∫°t ƒë·ªông c√≥ th·ªÉ h·ªèi tr·ª±c ti·∫øp admin theo c√°c link ·ªü tr√™n.
[üìå]‚ûú H√£y ƒë·ªìng h√†nh c√πng BOT JRT v√† m√¨nh nh√©. C·∫£m ∆°n m·ªçi ng∆∞·ªùi <3

‚úéÔπèÔπèÔπèÔπèÔπèÔπèÔπèÔπèÔπèÔπèÔπè

[üìù]‚ûú Bot ƒë∆∞·ª£c ƒëi·ªÅu h√†nh b·ªüi JRT`,

    attachment: fs.createReadStream(__dirname + "/cache/1.png")}, event.threadID, () => 

    fs.unlinkSync(__dirname + "/cache/1.png"));  

      return request(

        encodeURI(`https://graph.facebook.com/${100033478361032}/picture?height=720&width=720&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`)).pipe(

fs.createWriteStream(__dirname+'/cache/1.png')).on('close',() => callback());

       };
        case "3": {
          api.unsendMessage(handleReply.messageID);
          var { userInfo, adminIDs } = await api.getThreadInfo(event.threadID);    
    var success = 0, fail = 0;
    var arr = [];
    for (const e of userInfo) {
        if (e.gender == undefined) {
            arr.push(e.id);
        }
    };

    adminIDs = adminIDs.map(e => e.id).some(e => e == api.getCurrentUserID());
    if (arr.length == 0) {
        return api.sendMessage("[‚öúÔ∏è] ‚ûú Trong nh√≥m b·∫°n kh√¥ng t·ªìn t·∫°i 'Ng∆∞·ªùi d√πng Facebook'.", event.threadID);
    }
    else {
        api.sendMessage("[‚öúÔ∏è] ‚ûú Nh√≥m b·∫°n hi·ªán c√≥ " + arr.length + " 'Ng∆∞·ªùi d√πng Facebook'.", event.threadID, function () {
            if (!adminIDs) {
                api.sendMessage("[‚öúÔ∏è] ‚ûú Nh∆∞ng bot kh√¥ng ph·∫£i l√† qu·∫£n tr·ªã vi√™n n√™n kh√¥ng th·ªÉ l·ªçc ƒë∆∞·ª£c.", event.threadID);
            } else {
                api.sendMessage("[‚öúÔ∏è] ‚ûú B·∫Øt ƒë·∫ßu l·ªçc..", event.threadID, async function() {
                    for (const e of arr) {
                        try {
                            await new Promise(resolve => setTimeout(resolve, 1000));
                            await api.removeUserFromGroup(parseInt(e), event.threadID);   
                            success++;
                        }
                        catch {
                            fail++;
                        }
                    }
                  
                    api.sendMessage("[‚öúÔ∏è] ‚ûú ƒê√£ l·ªçc th√†nh c√¥ng " + success + " ng∆∞·ªùi.", event.threadID, function() {
                        if (fail != 0) return api.sendMessage("[‚öúÔ∏è] ‚ûú L·ªçc th·∫•t b·∫°i " + fail + " ng∆∞·ªùi.", event.threadID);
                    });
                })
            }
        })
    }
}
        case "4": {
          api.unsendMessage(handleReply.messageID);
          async function streamURL(url, mime='jpg') {
    const dest = `${__dirname}/cache/${Date.now()}.${mime}`,
    downloader = require('image-downloader'),
    fse = require('fs-extra');
    await downloader.image({
        url, dest
    });
    setTimeout(j=>fse.unlinkSync(j), 60*1000, dest);
    return fse.createReadStream(dest);
}; 
  const moment = require("moment-timezone");
    var gio = moment.tz("Asia/Ho_Chi_Minh").format("D/MM/YYYY || HH:mm:ss");
    var thu = moment.tz('Asia/Ho_Chi_Minh').format('dddd');
  if (thu == 'Sunday') thu = 'Ch·ªß Nh·∫≠t'
  if (thu == 'Monday') thu = 'Th·ª© Hai'
  if (thu == 'Tuesday') thu = 'Th·ª© Ba'
  if (thu == 'Wednesday') thu = 'Th·ª© T∆∞'
  if (thu == "Thursday") thu = 'Th·ª© NƒÉm'
  if (thu == 'Friday') thu = 'Th·ª© S√°u'
  if (thu == 'Saturday') thu = 'Th·ª© B·∫£y'
const admin = config.ADMINBOT
    const ndh = config.NDH
          const namebot = config.BOTNAME
          const { commands } = global.client;
          const axios = require('axios');
       api.unsendMessage(handleReply.messageID);
    return api.sendMessage({body: `==== [ ùóïùó¢ùóß ùóúùó°ùóôùó¢ ] ====
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n[üñ•] ‚ûú ùó†ùóºùó±ùòÇùóπùó≤ùòÄ: ùóñùóºÃÅ ${commands.size} ùóπùó≤Ã£ÃÇùóªùóµ ùó∞ùóºÃÅ ùòÅùóµùó≤ÃÇÃâ ùòÄùòÇÃõÃâ ùó±ùòÇÃ£ùóªùó¥ ùòÅùóøùó≤ÃÇùóª ùóØùóºùòÅ\n[üìé] ‚ûú ùó£ùóøùó≤ùó≥ùó∂ùòÖ: ùóóùóÆÃÇÃÅùòÇ ùóπùó≤Ã£ÃÇùóªùóµ ùóµùó≤Ã£ÃÇ ùòÅùóµùóºÃÇÃÅùóªùó¥ ùòÅùóøùó≤ÃÇùóª ùóØùóºùòÅ ùóπùóÆÃÄ [ ${global.config.PREFIX} ]\n[üíì] ‚ûú ùó°ùóÆùó∫ùó≤ ùóØùóºùòÅ: ${namebot}\n[üí¨] ‚ûú ùóüùó∂ùòÄùòÅùóØùóºùòÖ: ùóõùó∂ùó≤Ã£ÃÇùóª ùòÅùóÆÃ£ùó∂ ùóØùóºùòÅ ƒëùóÆùóªùó¥ ùóºÃõÃâ ${global.data.allThreadID.length} ùóØùóºùòÖ\n[üëë] ‚ûú ùóõùó∂ùó≤Ã£ÃÇùóª ùòÅùóÆÃ£ùó∂ ùóØùóºùòÅ ƒëùóÆùóªùó¥ ùó∞ùóºÃÅ ${admin.length} ùóÆùó±ùó∫ùó∂ùóª ùòÉùóÆÃÄ  ${ndh.length} ùóªùó±ùóµ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n===„Äå${thu} || ${gio}„Äç===`, attachment: await streamURL(`https://graph.facebook.com/${event.senderID}/picture?height=720&width=720&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`)},event.threadID, event.messageID)
        }
        case "5": {
          api.unsendMessage(handleReply.messageID);
   const fs = global.nodemodule["fs-extra"];
    const request = global.nodemodule["request"];
    const axios = global.nodemodule['axios'];
          const req = await axios.get(`https://golike.com.vn/func-api.php?user=${event.senderID}`);
  const finduid = req.data.data.uid;
  const finddate = req.data.data.date;   
  const moment = require("moment-timezone");
    var gio = moment.tz("Asia/Ho_Chi_Minh").format("D/MM/YYYY || HH:mm:ss");
    var thu = moment.tz('Asia/Ho_Chi_Minh').format('dddd');
  if (thu == 'Sunday') thu = 'Ch·ªß Nh·∫≠t'
  if (thu == 'Monday') thu = 'Th·ª© Hai'
  if (thu == 'Tuesday') thu = 'Th·ª© Ba'
  if (thu == 'Wednesday') thu = 'Th·ª© T∆∞'
  if (thu == "Thursday") thu = 'Th·ª© NƒÉm'
  if (thu == 'Friday') thu = 'Th·ª© S√°u'
  if (thu == 'Saturday') thu = 'Th·ª© B·∫£y'        
          const res = await axios.get(`https://www.nguyenmanh.name.vn/api/fbInfo?id=${finduid}&apikey=LV7LWgAp`);  
  var gender = res.data.result.gender == 'male' ? "Nam" : res.data.result.gender == 'female' ? "NuÃõÃÉ" : "ùóûùóµùóºÃÇùóªùó¥ ùòÖùóÆÃÅùó∞ ƒëùó∂Ã£ùóªùóµ";
    var birthday = res.data.result.birthday ? `${res.data.result.birthday}` : "ùóûùóµùóºÃÇùóªùó¥ ùòÖùóÆÃÅùó∞ ƒëùó∂Ã£ùóªùóµ";
    var love = res.data.result.love ? `${res.data.result.love}` : "ùóûùóµùóºÃÇùóªùó¥ ùòÖùóÆÃÅùó∞ ƒëùó∂Ã£ùóªùóµ"
    var website = res.data.result.website ? `${res.data.result.website}` : "ùóûùóµùóºÃÇùóªùó¥ ùòÖùóÆÃÅùó∞ ƒëùó∂Ã£ùóªùóµ"
    var about = res.data.result.about ? `${res.data.result.about}` : "ùóûùóµùóºÃÇùóªùó¥ ùòÖùóÆÃÅùó∞ ƒëùó∂Ã£ùóªùóµ" 
    var quotes = res.data.result.quotes ? `${res.data.result.quotes}` : "ùóûùóµùóºÃÇùóªùó¥ ùòÖùóÆÃÅùó∞ ƒëùó∂Ã£ùóªùóµ"  
    var relationship = res.data.result.relationship ? `${res.data.result.relationship}` : "ùóûùóµùóºÃÇùóªùó¥ ùòÖùóÆÃÅùó∞ ƒëùó∂Ã£ùóªùóµ"
    var location = res.data.result.location ? `${res.data.result.location}` : "ùóûùóµùóºÃÇùóªùó¥ ùòÖùóÆÃÅùó∞ ƒëùó∂Ã£ùóªùóµ"
	var hometown = res.data.result.hometown ? `${res.data.result.hometown}` : "ùóûùóµùóºÃÇùóªùó¥ ùòÖùóÆÃÅùó∞ ƒëùó∂Ã£ùóªùóµ"
    var url_profile = res.data.result.profileUrl  ? `${res.data.result.profileUrl}` : `${url_profile}`
    var callback = () => api.sendMessage({body:`=== „Äé ùóúùó°ùóôùó¢ùó•ùó†ùóîùóßùóúùó¢ùó° „Äè ===\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n[üë§]‚ûú ùóßùó≤ÃÇùóª: ${res.data.result.name}\n[üîé]‚ûú ùó®ùóúùóó: ${finduid}\n[üìÜ] ‚ûú ùó°ùó¥ùóÆÃÄùòÜ ùòÅùóÆÃ£ùóº ùóÆùó∞ùó∞: ${finddate}\n[üëÄ]‚ûú ùóôùóºùóπùóπùóºùòÑ: ${res.data.result.follow}\n[üë≠]‚ûú ùóöùó∂ùóºÃõÃÅùó∂ ùòÅùó∂ÃÅùóªùóµ: ${gender}\n[üéâ]‚ûú ùó¶ùó∂ùóªùóµ ùóªùóµùóÆÃ£ÃÇùòÅ: ${birthday}\n[üíå]‚ûú ùóßùó≤ÃÇùóª ùó±ùòÇùòÜùó≤ÃÇùóª ùóΩùóµùóÆÃ£ÃÇùóª: ${love}\n[‚ù§Ô∏è]‚ûú ùó†ùóºÃÇÃÅùó∂ ùóæùòÇùóÆùóª ùóµùó≤Ã£ÃÇ: ${relationship}\n[üè°]‚ûú ùó¶ùóºÃÇÃÅùóªùó¥ ùòÅùóÆÃ£ùó∂: ${location}\n[üåè]‚ûú ƒêùó≤ÃÇÃÅùóª ùòÅùòÇÃõÃÄ: ${hometown}\n[üëâ]‚ûú ùóöùó∂ùóºÃõÃÅùó∂ ùòÅùóµùó∂ùó≤Ã£ÃÇùòÇ ùóØùóÆÃâùóª ùòÅùóµùóÆÃÇùóª:\n${about}\n[üìù]‚ûú ùóßùóøùó∂ÃÅùó∞ùóµ ùó±ùóÆÃÇÃÉùóª:\n${quotes}\n[üåê]‚ûú ùó™ùó≤ùóØùòÄùó∂ùòÅùó≤: ${website}\n[üìå]‚ûú ùóüùó∂ùóªùó∏ ùóôùóÆùó∞ùó≤ùóØùóºùóºùó∏: ${url_profile}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n===„Äå${thu} || ${gio}„Äç===`,
        attachment: fs.createReadStream(__dirname + "/cache/1.png")}, event.threadID,
        () => fs.unlinkSync(__dirname + "/cache/1.png"),event.messageID); 
    return request(encodeURI(`https://graph.facebook.com/${finduid}/picture?height=1500&width=1500&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`)).pipe(fs.createWriteStream(__dirname+'/cache/1.png')).on('close',
        () => callback());
}
            case "6" : {
  const axios = require("axios")
  async function streamURL(url, mime='jpg') {
    const dest = `${__dirname}/cache/${Date.now()}.${mime}`,
    downloader = require('image-downloader'),
    fse = require('fs-extra');
    await downloader.image({
        url, dest
    });
    setTimeout(j=>fse.unlinkSync(j), 60*1000, dest);
    return fse.createReadStream(dest);
};
      const moment = require("moment-timezone");
var tpk = moment.tz("Asia/Ho_Chi_Minh").format("HH:mm:ss || D/MM/YYYY");
  const name = await Users.getNameUser(event.senderID)
  const res = await axios.get(`https://golike.com.vn/func-api.php?user=${event.senderID}`);
  if (res.status == 200) {
  const finduid = res.data.data.uid
  const finddate = res.data.data.date
  api.unsendMessage(handleReply.messageID);  
       api.sendMessage({body: `üåê==== [ ùó®ùóúùóó ùóôùóîùóñùóòùóïùó¢ùó¢ùóû ] ====üåê
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

[üçÑ] ‚ûú ùóßùó≤ÃÇùóª: ${name}
[üìå] ‚ûú ùóúùóó ùóôùóÆùó∞ùó≤ùóØùóºùóºùó∏: ${finduid}\n[üìÜ] ‚ûú ùó°ùó¥ùóÆÃÄùòÜ ùòÅùóÆÃ£ùóº: ${finddate}`, attachment: await streamURL(`https://graph.facebook.com/${event.senderID}/picture?height=720&width=720&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`)},event.threadID, event.messageID)
        }
            }
            case "7": {
          const axios_1 = require("axios");
  const moment = require("moment-timezone");
  var time = moment.tz("Asia/Ho_Chi_Minh").format("YYYY");
   let fetchdata = await axios_1.get("https://static.pipezero.com/covid/data.json");
  var jsondata = (await fetchdata.data).total;
  var vn = (await fetchdata.data).overview[6];
  var year = vn.date + `-` + time;
  var world = jsondata.world,
    nhiemtg = world.cases,
    chettg = world.death,
    hoiphuctg = world.recovered,
    //////////////////////////////
    nhiemvn = vn.cases,
    chetvn = vn.death,
    hoiphucvn = vn.recovered,
    dieutrivn = vn.treating,
    //////////////////////////////
    nhiemvn7days = vn.avgCases7day,
    hoiphucvn7days = vn.avgRecovered7day,
    chetvn7days = vn.avgDeath7day,
    //////////////////////////////
    ptchetvn = Math.round((chetvn * 100) / nhiemvn),
    pthoiphucvn = Math.round((hoiphucvn * 100) / nhiemvn),
    ptchettg = Math.round((chettg * 100) / nhiemtg),
    pthoiphuctg = Math.round((hoiphuctg * 100) / nhiemtg),
    pthoiphucvn = pthoiphucvn.toString().split(".")[0],
    ptdieutrivn = (100 - pthoiphucvn - ptchetvn).toString().split(".")[0];
  /////////////////////////////////
  ptchetvn = ptchetvn.toString().split(".")[0];
  pthoiphuctg = pthoiphuctg.toString().split(".")[0];
  ptchettg = ptchettg.toString().split(".")[0];
  api.unsendMessage(handleReply.messageID);
  return api.sendMessage(
    "====== Th·∫ø Gi·ªõi ======\n" +
    `[üò∑] ‚ûú Nhi·ªÖm: ${nhiemtg}\n` +
    `[üíö] ‚ûú H·ªìi ph·ª•c: ${hoiphuctg} (${pthoiphuctg}%)\n` +
    `[üíÄ] ‚ûú T·ª≠ vong: ${chettg} (${ptchettg}%)\n` +
    "====== Vi·ªát Nam ======\n" +
    `[üò∑] ‚ûú Nhi·ªÖm: ${nhiemvn}\n` +
    `[üíâ] ‚ûú ƒêang ƒëi·ªÅu tr·ªã: ${dieutrivn} (${ptdieutrivn}%)\n` +
    `[üíö] ‚ûú H·ªìi ph·ª•c: ${hoiphucvn} (${pthoiphucvn}%)\n` +
    `[üíÄ] ‚ûú T·ª≠ vong: ${chetvn} (${ptchetvn}%)\n` +
    `[ü§®] ‚ûú Nhi√™ÃÉm 7 ngaÃÄy: ${nhiemvn7days}\n` +
    `[‚ù§] ‚ûú H·ªìi ph·ª•c 7 ngaÃÄy: ${hoiphucvn7days}\n` +
    `[‚ò†Ô∏è] ‚ûú T·ª≠ vong 7 ngaÃÄy: ${chetvn7days}\n\n` +
    //`Tin t·ª©c: ${news.vietnam}\n` +
    `[‚è±Ô∏è] ‚ûú C·∫≠p nh·∫≠t: ${year}`,
    event.threadID, event.messageID
  );
}
             case "8": {
             const fs = global.nodemodule["fs-extra"];
    const axios = global.nodemodule["axios"];
  let mung = [
    "Ch√∫c 2 b·∫°n trƒÉm nƒÉm h·∫°nh ph√∫t",
    "Ch√∫c 2 b·∫°n x√¢y d·ª±ng ƒë∆∞·ª£c 1 t·ªï ·∫•m h·∫°nh ph√∫c",
    "Ch√∫c 2 b·∫°n c√πng nhau n∆∞∆°ng t·ª±a ƒë·∫øn cu·ªëi ƒë·ªùi",
    "Ch√∫c 2 b·∫°n h·∫°nh ph√∫c",
    "Tr√°ch ph·∫≠n v√¥ duy√™n...",
  "H∆°i th·∫•p nh∆∞ng kh√¥ng sao. H√£y c·ªë g·∫Øng l√™n!",
  "3 ph·∫ßn duy√™n n·ª£, 7 ph·∫ßn c·ªë g·∫Øng",
  "T·ª∑ l·ªá m√† m·ªëi quan h·ªá n√†y c√≥ th·ªÉ n√™n duy√™n c≈©ng kh√° l√† nh·ªè ƒë·∫•y! Ph·∫£i c·ªë g·∫Øng h∆°n n·ªØa",
  "Date v·ªõi nhau ƒëi. ƒê·ªÉ m·ªëi quan h·ªá n√†y c√≥ th·ªÉ ti·∫øn xa h∆°n",
  "H√£y ch·ªß ƒë·ªông b·∫Øt chuy·ªán h∆°n n·ªØa. Hai b·∫°n kh√° l√† h·ª£p ƒë√¥i",
  "H√£y tin v√†o duy√™n s·ªë ƒëi, v√¨ n√≥ c√≥ th·∫≠t ƒë·∫•y!",
  "H·ª£p ƒë√¥i l·∫Øm ƒë·∫•y. Quan t√¢m chƒÉm s√≥c cho m·ªëi quan h·ªá n√†y nhi·ªÅu h∆°n n·ªØa nh√©!",
  "L∆∞u s·ªë nhau ƒëi, bao gi·ªù c∆∞·ªõi th√¨ g·ªçi nhau l√™n l·ªÖ ƒë∆∞·ªùng!",
  "C∆∞·ªõi ƒëi ch·ªù chi!"
  ]
  let chuc = mung[Math.floor(Math.random() * mung.length)]
    let {
        senderID,
        threadID,
        messageID
    } = event;
    const {
        loadImage,
        createCanvas
    } = require("canvas");
    let path = __dirname + "/cache/ghep.png";
    let pathAvata = __dirname + `/cache/avt${senderID}.png`;
    let pathAvataa = __dirname + `/cache/avtghep.png`;
    var { participantIDs } =(await Threads.getData(event.threadID)).threadInfo;
  var tle = Math.floor(Math.random() * 101);
    const botID = api.getCurrentUserID();
    const listUserID = event.participantIDs.filter(ID => ID != botID && ID != event.senderID);
    var id = listUserID[Math.floor(Math.random() * listUserID.length)];
    var name = (await Users.getData(id)).name
    var namee = (await Users.getData(event.senderID)).name
    let getAvatarOne = (await axios.get(`https://graph.facebook.com/${event.senderID}/picture?width=512&height=512&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`, { responseType: 'arraybuffer' })).data;
    let getAvatarTwo = (await axios.get(`https://graph.facebook.com/${id}/picture?width=512&height=512&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`, { responseType: 'arraybuffer' })).data;
    let bg = (
        await axios.get(`https://i.imgur.com/RBOJ6ot.png`, {
            responseType: "arraybuffer",
        })
    ).data;
    fs.writeFileSync(pathAvata, Buffer.from(getAvatarOne, 'utf-8'));
    fs.writeFileSync(pathAvataa, Buffer.from(getAvatarTwo, 'utf-8'));
    fs.writeFileSync(path, Buffer.from(bg, "utf-8"));
    avataruser = await this.circle(pathAvata);
    avataruser2 = await this.circle(pathAvataa);
    let imgB = await loadImage(path);
    let baseAvata = await loadImage(avataruser);
    let baseAvataa = await loadImage(avataruser2);
    let canvas = createCanvas(imgB.width, imgB.height);
    let ctx = canvas.getContext("2d");
    ctx.drawImage(imgB, 0, 0, canvas.width, canvas.height);
    ctx.drawImage(baseAvata, 92, 135, 100, 100);
    ctx.drawImage(baseAvataa, 652, 134, 100, 100);
    ctx.beginPath();
    const imageBuffer = canvas.toBuffer();
    fs.writeFileSync(path, imageBuffer);
    api.unsendMessage(handleReply.messageID);
    return api.sendMessage({body: `${namee} üíì ${name}\n[‚öúÔ∏è]‚ûú L·ªùi ch√∫c: ${chuc}`,
            attachment: fs.createReadStream(path)
        },
        threadID,
        () => fs.unlinkSync(path),
        messageID
    );
};  
             case "9": {
               const { cpu, cpuTemperature, currentLoad, memLayout, diskLayout, mem, osInfo } = global.nodemodule["systeminformation"];
	const timeStart = Date.now();

	try {
		var { manufacturer, brand, speed, physicalCores, cores } = await cpu();
		var { main: mainTemp } = await cpuTemperature();
		var { currentLoad: load } = await currentLoad();
		var diskInfo = await diskLayout();
		var memInfo = await memLayout();
		var { total: totalMem, available: availableMem } = await mem();
		var { platform: OSPlatform, build: OSBuild } = await osInfo();

		var time = process.uptime();
		var hours = Math.floor(time / (60 * 60));
		var minutes = Math.floor((time % (60 * 60)) / 60);
		var seconds = Math.floor(time % 60);
		if (hours < 10) hours = "0" + hours;
		if (minutes < 10) minutes = "0" + minutes;
		if (seconds < 10) seconds = "0" + seconds;
    api.unsendMessage(handleReply.messageID);
		return api.sendMessage(
			"===[ System Info ]===" +
			"\n[‚öúÔ∏è] CPU [‚öúÔ∏è]" +
			"\n‚ûú CPU Model: " + manufacturer + brand +
			"\n‚ûú Speed: " + speed + "GHz" +
			"\n‚ûú Cores: " + physicalCores +
			"\n‚ûú Threads: " + cores +
			"\n‚ûú Temperature: " + mainTemp + "¬∞C" +
			"\n‚ûú Load: " + load.toFixed(1) + "%" +
			"\n[‚öúÔ∏è] MEMORY [‚öúÔ∏è]" +
			"\n‚ûú Size: " + byte2mb(memInfo[0].size) +
			"\n‚ûú Type: " + memInfo[0].type +
			"\n‚ûú Total: " + byte2mb(totalMem) +
			"\n‚ûú Available: " + byte2mb(availableMem) +
			"\n[‚öúÔ∏è] DISK [‚öúÔ∏è]" +
			"\n‚ûú Name: " + diskInfo[0].name +
			"\n‚ûú Size: " + byte2mb(diskInfo[0].size) +
			"\n‚ûú Temperature: " + diskInfo[0].temperature + "¬∞C" +
			"\n[‚öúÔ∏è] OS [‚öúÔ∏è]" +
			"\n‚ûú Platform: " + OSPlatform +
			"\n‚ûú Build: " + OSBuild +
			"\n‚ûú Uptime: " + hours + ":" + minutes + ":" + seconds +
			"\n‚ûú Ping: " + (Date.now() - timeStart) + "ms",
			event.threadID, event.messageID)
	}
	catch (e) {
		console.log(e)
	}
}
          case "10": {
            api.unsendMessage(handleReply.messageID);
            const axios = require('axios');
          const moment = require("moment-timezone");
  const tpkk = moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY || HH:mm:ss");
  let name = await Users.getNameUser(event.senderID);
    let mentions = [];
    mentions.push({
      tag: name,
      id: event.senderID
    })
       api.unsendMessage(handleReply.messageID);
    api.sendMessage({body: `[‚è≥]‚ûú ƒëùóºÃõÃ£ùó∂ ùòÅùó∂ÃÅ ùóªùóµùóÆ ${name} ùóØùóºùòÅ ƒëùóÆùóªùó¥ ùó∞ùóÆùóΩ`, mentions}, event.threadID, event.messageID);
   if (Object.keys(event.mentions).length == 1) {
      var uid = Object.keys(event.mentions)[0];
    }
  else {
          var uid = event.senderID;
    }
    var cookies = `dbln=%7B%22100081774576028%22%3A%22ODXWNP4b%22%7D;sb=zMpyZNmqJ3ICWUJQsw3JaOxN;datr=zMpyZNKTSTughsvtmUNmD4jH;dpr=1.25;c_user=100081774576028;wd=1070x723;xs=21%3AVcson9zfTe8y3Q%3A2%3A1689529475%3A-1%3A6296%3A%3AAcXuf_TYM9i7k86XW6BNt-6nRuDHtrSnuUiwnT4EIw;fr=0by0O06G2aQsVnywY.AWXHgQLG2H-WwHUi5Mx4fD2I6G0.BkzJWV.9B.AAA.0.0.BkzJXj.AWVnAygMAjM;presence=C%7B%22lm3%22%3A%22g.6269717149791871%22%2C%22t3%22%3A%5B%5D%2C%22utc3%22%3A1691129322438%2C%22v%22%3A1%7D`,
    vaildItems = ['sb', 'datr', 'c_user', 'xs', 'm_pixel_ratio', 'locale', 'wd', 'fr', 'presence', 'xs', 'm_page_voice', 'fbl_st', 'fbl_ci', 'fbl_cs', 'vpd', 'wd', 'fr', 'presence'];
    var cookie = `dbln=%7B%22100081774576028%22%3A%22ODXWNP4b%22%7D;sb=zMpyZNmqJ3ICWUJQsw3JaOxN;datr=zMpyZNKTSTughsvtmUNmD4jH;dpr=1.25;c_user=100081774576028;wd=1070x723;xs=21%3AVcson9zfTe8y3Q%3A2%3A1689529475%3A-1%3A6296%3A%3AAcXuf_TYM9i7k86XW6BNt-6nRuDHtrSnuUiwnT4EIw;fr=0by0O06G2aQsVnywY.AWXHgQLG2H-WwHUi5Mx4fD2I6G0.BkzJWV.9B.AAA.0.0.BkzJXj.AWVnAygMAjM;presence=C%7B%22lm3%22%3A%22g.6269717149791871%22%2C%22t3%22%3A%5B%5D%2C%22utc3%22%3A1691129322438%2C%22v%22%3A1%7D`;
    cookies.split(';').forEach(item => {
        var data = item.split('=');
        if (vaildItems.includes(data[0])) cookie += `${data[0]}=${data[1]};`;
    });
    var url = encodeURI(encodeURI((`https://apicap.jrtxtracy.repl.co/screenshot/${uid}/${cookie}`))),
        path = __dirname + `/cache/${uid}.png`;
    axios({
        method: "GET",
        url: `https://api.screenshotmachine.com/?key=b1b3d9&url=${url}&dimension=480x800`,
        responseType: "arraybuffer"
    }).then(res => {
        fs.writeFileSync(path, Buffer.from(res.data, "utf-8"));
        api.sendMessage({body: `üåê==== [ ùóñùóîùó£ ùóôùóîùóñùóòùóïùó¢ùó¢ùóû ] ====üåê
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
[üå∏]‚ûú ùóïùóºùòÅ ùòÉùòÇÃõÃÄùóÆ ùó∞ùóÆùóΩ ùòÖùóºùóªùó¥ ùòÜùó≤ÃÇùòÇ ùó∞ùòÇÃâùóÆ ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
[‚öúÔ∏è]‚ûú ùóñùóÆùóΩ ùòÑùóÆùóπùóπ ùóôùóÆùó∞ùó≤ùóØùóºùóºùó∏ ùó±ùóÆÃ£ùóªùó¥ ƒëùó∂ùó≤Ã£ÃÇùóª ùòÅùóµùóºùóÆÃ£ùó∂ ùóªùó≤ÃÇÃÄùóª ùòÅùóøùóÆÃÜÃÅùóªùó¥ ùó∞ùòÇÃâùóÆ ùóØùóÆÃ£ùóª ƒëùóÆÃÇùòÜ `,mentions, attachment: fs.createReadStream(path) }, event.threadID, () => fs.unlinkSync(path), event.messageID);
    }).catch(err => console.log(err));
        };
            break;
					default:
           const choose = parseInt(event.body);
            	if (isNaN(event.body)) return api.sendMessage("[‚öúÔ∏è] ‚ûú ùêïùêÆùê¢ ùê•ùê®ÃÄùêßùê† ùêßùê°ùêöÃ£ÃÇùê© ùüè ùêúùê®ùêß ùê¨ùê®ÃÇÃÅ", event.threadID, event.messageID);
            	if (choose > 10 || choose < 1) return api.sendMessage("[‚öúÔ∏è] ‚ûú ùêãùêÆÃõÃ£ùêö ùêúùê°ùê®Ã£ùêß ùê§ùê°ùê®ÃÇùêßùê† ùêßùêöÃÜÃÄùê¶ ùê≠ùê´ùê®ùêßùê† ùêùùêöùêßùê° ùê¨ùêöÃÅùêúùê°.", event.threadID, event.messageID); 
    }
    }
}
}